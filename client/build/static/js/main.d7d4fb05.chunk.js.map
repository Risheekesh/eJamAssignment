{"version":3,"sources":["reducers/deployment-store.ts","reducers/index.ts","components/list-deployment.tsx","components/add-deployment.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["deploymentStore","state","action","type","id","text","completed","map","todo","combineReducers","useStyles","makeStyles","root","marginTop","table","minWidth","ListDeploymentTable","props","classes","TableContainer","component","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","TableBody","deploymentList","row","key","templateName","scope","url","version","deployementAt","onClick","deleteDeployment","bind","_id","theme","createStyles","flexGrow","maxWidth","width","border","padding","margin","paper","spacing","textAlign","color","palette","secondary","AddDeployment","React","useState","setTemplateName","setVersion","setUrl","submitForm","a","body","addDeployment","updateVersionList","Grid","container","item","xs","TextField","label","variant","value","onChange","e","target","select","event","templateNameWithVersion","templateNameWithVersionsObj","find","obj","name","helperText","option","MenuItem","versionsList","Button","disabled","App","getDeploymentList","axios","get","result","setState","loader","data","getTemplateNameWithVersion","delete","post","templateNameWithVersions","versions","this","CircularProgress","disableShrink","Component","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7d4fb05.chunk.js","sourcesContent":["\nconst deploymentStore = (state = [], action: any) => {\n    switch (action.type) {\n        case 'ADD_DEPLOYMENT':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case 'LIST_DEPLOYMENT':\n            return state.map((todo: any) =>\n                (todo.id === action.id)\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n        case 'DELETE_DEPLOYMENT':\n            return state.map((todo: any) =>\n                (todo.id === action.id)\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n        default:\n            return state\n    }\n}\n\nexport default deploymentStore;\n","import { combineReducers } from 'redux';\nimport deploymentStore from './deployment-store';\n\nexport default combineReducers({\n    deploymentStore\n})","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { DeploymentList } from './../App';\n\nconst useStyles = makeStyles({\n    root:{\n        marginTop: '20px'\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n\ninterface ListDeploymentProps {\n    deploymentList?: DeploymentList[];\n    deleteDeployment: Function;\n}\nconst ListDeploymentTable: React.SFC<ListDeploymentProps> = (props: ListDeploymentProps) => {\n\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper} className={classes.root} >\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Template Name</TableCell>\n                        <TableCell >Url</TableCell>\n                        <TableCell >Version Name</TableCell>\n                        <TableCell >Deployed At</TableCell>\n                        <TableCell >Action</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.deploymentList && props.deploymentList.map((row: DeploymentList) => (\n                        <TableRow key={row.templateName}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.templateName}\n                            </TableCell>\n                            <TableCell >{row.url}</TableCell>\n                            <TableCell >{row.version}</TableCell>\n                            <TableCell >{row.deployementAt}</TableCell>\n                            <TableCell onClick={props.deleteDeployment.bind(null, row._id)} className=\"link\"  >Delete</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default ListDeploymentTable;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { TemplateNameWithVersions, DeploymentList } from './../App';\n\ninterface AddDeploymentProps {\n    templateNameWithVersion?: TemplateNameWithVersions[];\n    versionsList?: string[];\n    updateVersionList: Function;\n    addDeployment: Function;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            maxWidth: '800px',\n            width: '100%',\n            border: '1px solid rgba(0, 0, 0, 0.12)',\n            padding: '24px',\n            margin: '20px auto'\n        },\n        paper: {\n            padding: theme.spacing(2),\n            textAlign: 'center',\n            color: theme.palette.text.secondary,\n        },\n    })\n);\n\nconst AddDeployment: React.SFC<AddDeploymentProps> = (props: AddDeploymentProps) => {\n    const [templateName, setTemplateName] = React.useState('');\n    const [version, setVersion] = React.useState('');\n    const [url, setUrl] = React.useState('');\n    const classes = useStyles();\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTemplateName(event.target.value);\n        if (props.templateNameWithVersion) {\n            const templateNameWithVersionsObj: TemplateNameWithVersions | undefined = props.templateNameWithVersion.find((obj: any) => obj.name === event.target.value);\n            props.updateVersionList(templateNameWithVersionsObj);\n        }\n    };\n\n    const submitForm = async () => {\n        if (templateName && version && url) {\n            const body: DeploymentList = {\n                templateName,\n                version,\n                url\n            }\n            await props.addDeployment(body);\n            setTemplateName('');\n            setVersion('');\n            setUrl('');\n            props.updateVersionList();\n        }\n    }\n\n    const clearForm = () => {\n        setTemplateName('');\n        setVersion('');\n        setUrl('');\n        props.updateVersionList();\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <label>Create Deployment:</label>\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField id=\"outlined-basic\" label=\"Url\" variant=\"outlined\" value={url} onChange={(e) => { setUrl(e.target.value) }} />\n                </Grid>\n                <Grid item xs={4}>\n                    <TextField\n                        id=\"standard-select-currency\"\n                        select\n                        label=\"Select\"\n                        value={templateName}\n                        onChange={handleChange}\n                        helperText=\"Please select Template Name\"\n                    >\n                        {props.templateNameWithVersion && props.templateNameWithVersion.map((option: TemplateNameWithVersions) => (\n                            <MenuItem key={option.name} value={option.name}>\n                                {option.name}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Grid>\n\n                <Grid item xs={4}>\n\n                    <TextField\n                        id=\"standard-select-currency\"\n                        select\n                        label=\"Select\"\n                        value={version}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => { setVersion(event.target.value) }}\n                        helperText=\"Please select Version Number\"\n                    >\n                        {props.versionsList && props.versionsList.map((option: string) => (\n                            <MenuItem key={option} value={option}>\n                                {option}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Grid>\n                <Grid item xs={3} >\n                    <Button variant=\"outlined\" className=\"margin-right-20px\" onClick={clearForm} >Clear</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={submitForm} disabled={!(templateName && version && url)} >\n                        Submit\n                </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default AddDeployment;","import React from 'react';\nimport './App.css';\nimport ListDeploymentTable from './components/list-deployment';\nimport AddDeployment from './components/add-deployment';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport interface TemplateNameWithVersions {\n  name: string;\n  versions: string[];\n}\n\nexport interface DeploymentList {\n  templateName: string;\n  version: string;\n  url: string;\n  deployementAt?: Date;\n  _id?: string;\n}\n\ninterface AppState {\n  loader: boolean;\n  templateNameWithVersion?: TemplateNameWithVersions[];\n  versions?: string[];\n  deploymentList?: DeploymentList[];\n}\n\nclass App extends React.Component<any, AppState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      loader: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      loader: true\n    })\n    this.getDeploymentList();\n    this.getTemplateNameWithVersion();\n  }\n\n  private getDeploymentList = async () => {\n    const result = await axios.get('/api/deployment');\n    this.setState({\n      loader: false,\n      deploymentList: result.data.data\n    });\n  }\n\n  private getTemplateNameWithVersion = async () => {\n    const result = await axios.get('/api/template');\n    this.setState({\n      loader: false,\n      templateNameWithVersion: result.data.data\n    });\n  }\n\n  private deleteDeployment = async (id: string) => {\n    this.setState({\n      loader: true\n    })\n    await axios.delete(`/api/deployment/${id}`);\n    this.getDeploymentList();\n  }\n\n  private addDeployment = async (body: DeploymentList) => {\n    this.setState({\n      loader: true\n    })\n    await axios.post('/api/deployment', body);\n    this.getDeploymentList();\n    return true;\n\n  }\n\n  private updateVersionList = async (templateNameWithVersions?: TemplateNameWithVersions) => {\n    this.setState({\n      versions: templateNameWithVersions && templateNameWithVersions.versions\n    })\n  };\n\n  render() {\n\n    const { deploymentList, loader, templateNameWithVersion, versions } = this.state;\n    return (\n      <div className=\"body\">\n        <header className=\"page-title\">\n          Deployment Page\n      </header>\n        {loader ?\n          <CircularProgress disableShrink className=\"center-align-loader\" />\n          : null\n        }\n        <AddDeployment addDeployment={this.addDeployment} updateVersionList={this.updateVersionList} templateNameWithVersion={templateNameWithVersion} versionsList={versions} />\n        <Grid container spacing={2}>\n          <Grid item xs={10} className=\"center\" >\n            <label>Deployment List:</label>\n            <ListDeploymentTable deploymentList={deploymentList} deleteDeployment={this.deleteDeployment} />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}